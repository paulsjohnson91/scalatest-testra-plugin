package org.scalatest.tools

import java.net.URLEncoder
import java.nio.charset.StandardCharsets

import org.scalatest._
import org.scalatest.events._
import scalaj.http.{HttpResponse, Http}
import spray.json._
import DefaultJsonProtocol._
import org.slf4j._

class JUnitReporter extends Reporter with App {
  case class Project(
      id: String,
      name: String,
      description: String,
      projectType: String,
      creationDate: Long
  )
  case class ExecutionRequest(
      projectId: String,
      description: String,
      host: String,
      parallel: Boolean,
      environment: String,
      branch: String,
      buildRef: String,
      tags: List[String]
  )
  case class ExecutionResponse(id: String)
  case class ScenarioRequest(
      projectId: String,
      featureId: String,
      featureDescription: String,
      nameSpace: String,
      name: String,
      manual: Boolean,
      tags: List[String],
      before: String,
      after: String,
      backkgroundSteps: List[String],
      steps: List[StepRequest],
      dataRows: List[String]
  )
  case class StepRequest(index: Integer, cells: List[DataTableRow])
  case class CellRequest(index: Integer, value: String)
  case class Step(index: Integer, text: String)
  case class DataTableRow(index: Integer, cells: List[CellRequest])
  def log: Logger = LoggerFactory.getLogger("TestraReporter")

  var apiUrl = ""
  var project = ""
  var executionId = ""
  var projectId = ""
  override def apply(event: Event): Unit = {
    event match {
      case e: RunStarting =>
        e.configMap.get("testraApi") match {
          case Some(i) => apiUrl = i.asInstanceOf[String]
          case None    => println("No url found for testra")
        }
        initialiseTestra

      case e: TestSucceeded =>
        e.recordedEvents.foreach {
          case r: InfoProvided =>
            println(r.message)
          case _ =>
        }
      case _ =>
    }
  }

  def initialiseTestra: Unit = {
    project = "Companion Service"
    log.info(s"Testra Url $apiUrl")
    log.info(s"Project: $project")
    getProjectId
    createExecutionId
  }

  def getProjectId: Unit = {
    implicit val projectFormat: JsonFormat[Project] = jsonFormat5(Project)
    val response: HttpResponse[String] = Http(
      apiUrl + "/projects/" + URLEncoder
        .encode(project, StandardCharsets.UTF_8.toString)
        .replace("+", "%20")
    ).asString
    projectId = response.body.parseJson.convertTo[Project].id
    log.info(s"Project ID $projectId found")
  }

  def createExecutionId: Unit = {
    implicit val execution: JsonFormat[ExecutionRequest] = jsonFormat8(
      ExecutionRequest
    )
    implicit val executionResponse: JsonFormat[ExecutionResponse] = jsonFormat1(
      ExecutionResponse
    )

    val executionRequest = ExecutionRequest(
      projectId,
      "Generated by Scalatest Plugin",
      "host",
      false,
      "cosmic-dev",
      "Develop",
      "buildRef",
      List("paul.johnson2@sky.uk")
    )
    executionId = Http(
      apiUrl + "/projects/" + projectId + "/executions"
    ).postData(executionRequest.toJson.compactPrint)
      .header("content-type", "application/json")
      .asString
      .body
      .parseJson
      .convertTo[ExecutionResponse]
      .id
    log.info("Execution Id set to " + executionId)

  }

}
